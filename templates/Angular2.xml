<templateSet group="Angular2">
  <template name="ng2-bootstrap" value="import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';&#10;&#10;import { $APP$Module } from './$NAME$.module';&#10;&#10;platformBrowserDynamic().bootstrapModule($APP$Module)&#10;    .then(success =&gt; console.log(`Bootstrap success`))&#10;    .catch(error =&gt; console.log(error));&#10;$END" description="Angular2 bootstrap" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="APP" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME" expression="lowercaseAndDash(APP)" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="serv" value="private $service$: $Service$" description="constructor private service injection" toReformat="false" toShortenFQNames="true">
    <variable name="Service" expression="" defaultValue="&quot;SomeService&quot;" alwaysStopAt="true" />
    <variable name="service" expression="decapitalize(Service)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="sub" value="this.$service$.$method$($arg$).subscribe(_ =&gt; this.$entity$ = _);" description="subscribe to service method filling component field" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="service" expression="" defaultValue="&quot;service&quot;" alwaysStopAt="true" />
    <variable name="method" expression="" defaultValue="&quot;getAll&quot;" alwaysStopAt="true" />
    <variable name="arg" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="entity" expression="" defaultValue="&quot;entity&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="find" value="this.$array$.find($entity$ =&gt; $entity$.id === $input$)" description="find an item from id" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="array" expression="" defaultValue="&quot;array&quot;" alwaysStopAt="true" />
    <variable name="entity" expression="" defaultValue="&quot;entity&quot;" alwaysStopAt="true" />
    <variable name="input" expression="" defaultValue="&quot;input&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="nga" value="&lt;ng-container *ngIf=&quot;($thing$|async) as $thingWithoutDollar$&quot;&gt;&#10;  $END$&#10;&lt;/ng-container&gt;&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="thing" expression="complete()" defaultValue="&quot;thing&quot;" alwaysStopAt="true" />
    <variable name="thingWithoutDollar" expression="substringBefore(thing, &quot;$&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="ngi" value="&lt;ng-container *ngIf=&quot;$thing$&quot;&gt;&#10;  $END$&#10;&lt;/ng-container&gt;&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="thing" expression="" defaultValue="&quot;condition&quot;" alwaysStopAt="true" />
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="nginput" value="private $name$$ = new BehaviorSubject&lt;$type$&gt;(null);&#10;&#10;get $name$() {&#10;  return this.$name$$.value;&#10;}&#10;&#10;@Input() set $name$($name$: $type$) {&#10;  this.$name$$.next($name$);&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <variable name="type" expression="" defaultValue="&quot;type&quot;" alwaysStopAt="true" />
    <context>
      <option name="HTML" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
</templateSet>